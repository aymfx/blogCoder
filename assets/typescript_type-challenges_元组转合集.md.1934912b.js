import{_ as s,c as n,o as a,b as p}from"./app.3c4b183d.js";const i=JSON.parse('{"title":"\u5B9E\u73B0\u6CDB\u578B TupleToUnion<T>\uFF0C\u5B83\u8FD4\u56DE\u5143\u7EC4\u6240\u6709\u503C\u7684\u5408\u96C6","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/type-challenges/\u5143\u7EC4\u8F6C\u5408\u96C6.md"}'),l={name:"typescript/type-challenges/\u5143\u7EC4\u8F6C\u5408\u96C6.md"},o=p(`<h1 id="\u5B9E\u73B0\u6CDB\u578B-tupletounion-t-\uFF0C\u5B83\u8FD4\u56DE\u5143\u7EC4\u6240\u6709\u503C\u7684\u5408\u96C6" tabindex="-1">\u5B9E\u73B0\u6CDB\u578B TupleToUnion&lt;T&gt;\uFF0C\u5B83\u8FD4\u56DE\u5143\u7EC4\u6240\u6709\u503C\u7684\u5408\u96C6 <a class="header-anchor" href="#\u5B9E\u73B0\u6CDB\u578B-tupletounion-t-\uFF0C\u5B83\u8FD4\u56DE\u5143\u7EC4\u6240\u6709\u503C\u7684\u5408\u96C6" aria-hidden="true">#</a></h1><div class="language-typescript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Arr</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// type TupleToUnion&lt;T extends Array&lt;any&gt;&gt; = T extends [...infer rest] ? rest[number] : never;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TupleToUnion</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TupleToUnion</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Arr</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// expected to be &#39;1&#39; | &#39;2&#39; | &#39;3&#39;</span></span>
<span class="line"></span></code></pre></div>`,2),e=[o];function t(r,c,y,D,F,C){return a(),n("div",null,e)}var _=s(l,[["render",t]]);export{i as __pageData,_ as default};
